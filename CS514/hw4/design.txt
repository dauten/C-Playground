Basic read-only functionality works, but writing is not supported.


In terms of what it can do:
Given file system named fuse_fs it can mount this and files in that
file system can be accessed via terminal.  You can ls folders, cat files,
change directories, etc.

What it can't do:
The file system is read only, files cannot be added and all items are set to permissions
444.  Additional metadata like dates and file size are also not included/accurate

I've found an error in my previous filefs project where when you added a file,
only every other directory in its path was inserted.  This error came from
overzealous optimization and I've included the updated, working code in a filefs/
folder for you to construct a file system before mounting it since this project
is read only.

Due to a peculiarity with how my root folder is treated in my filefs program
my "get items in this folder" function for this project doesn't work on it,
only on deeper folders.
As such I've hardcoded that all items must be prefixed with /home (items like
/A.txt and /var/B.txt cannot be accessed).  This is a shortcoming but I can't
imagine this will impact testing much.

As one other limitation, this implementation can only print the first block worth
of data for files.  So instead of the 496000 byte file limit for my filefs project
this is limited to a mere 496.  This comes from me not having time to create
a void * that consists of every block of data so I just return the first one.

Sample usage:
I created a file system, fuse_fs, for testing with the following structure:
r/
  home/
    fs.h
    dale/
      archer.py
      C-Playground/
        makefile
        CS514/
          hw3/
            fs.c
(as stated everything must be under home dir)

moving this into the same folder with the executable and then executing it,
the file system is mounted (at mnt/ for my testing).  By ls'ing mnt you can
see the hard coded home folder.  This will be here regardless of if you have
a home folder in fuse_fs.  From here you can use cd and ls to take a look
at the files.  If you use the -l flag on ls you can see date is the UNIX epoch
and file size is the system maximum of 496 for files and is 0 for directories.
At this point you can use ls, cd, cat, wc, grep or any other things on these
files and directories as long as it doesn't mutate them.
